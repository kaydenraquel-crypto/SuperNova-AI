apiVersion: v1
kind: Secret
metadata:
  name: supernova-secrets-production
  namespace: supernova-production
  labels:
    app: supernova-ai
    environment: production
    secret-version: v1.0.0
    managed-by: supernova-secrets-manager
type: Opaque
data:
  # IMPORTANT: All values below are base64 encoded placeholders
  # In production, these should be populated from a secure secret management system
  # Use: kubectl create secret generic supernova-secrets-production --from-env-file=.env.prod.secrets
  
  # Core Security Keys (Base64 encoded)
  SECRET_KEY: # Base64 of actual production secret key (min 32 chars)
  JWT_SECRET_KEY: # Base64 of actual production JWT secret key (min 32 chars)
  ENCRYPTION_KEY: # Base64 of actual production encryption key (min 32 chars)

  # Database Credentials
  PROD_DATABASE_URL: # Base64 of postgresql://user:pass@host:port/dbname
  PROD_DB_SSL_CA: # Base64 of SSL CA certificate content
  PROD_DB_SSL_CERT: # Base64 of SSL client certificate content
  PROD_DB_SSL_KEY: # Base64 of SSL client key content

  # TimescaleDB Credentials
  PROD_TIMESCALE_HOST: # Base64 of TimescaleDB hostname
  PROD_TIMESCALE_DB: # Base64 of TimescaleDB database name
  PROD_TIMESCALE_USER: # Base64 of TimescaleDB username
  PROD_TIMESCALE_PASSWORD: # Base64 of TimescaleDB password
  PROD_TIMESCALE_SSL_CERT: # Base64 of TimescaleDB SSL certificate
  PROD_TIMESCALE_SSL_KEY: # Base64 of TimescaleDB SSL key
  PROD_TIMESCALE_SSL_ROOT_CERT: # Base64 of TimescaleDB SSL root certificate

  # LLM API Keys
  OPENAI_API_KEY: # Base64 of OpenAI API key (sk-...)
  OPENAI_ORG_ID: # Base64 of OpenAI organization ID
  OPENAI_PROJECT_ID: # Base64 of OpenAI project ID
  OPENAI_BACKUP_API_KEY: # Base64 of backup OpenAI API key
  ANTHROPIC_API_KEY: # Base64 of Anthropic API key
  ANTHROPIC_BACKUP_API_KEY: # Base64 of backup Anthropic API key

  # LLM Cost Limits
  PROD_LLM_DAILY_LIMIT: # Base64 of daily cost limit (e.g., "100.00")
  PROD_LLM_MONTHLY_LIMIT: # Base64 of monthly cost limit (e.g., "2000.00")

  # Cache Credentials
  PROD_REDIS_URL: # Base64 of redis://user:pass@host:port/db
  PROD_REDIS_PASSWORD: # Base64 of Redis password

  # External API Keys
  PROD_X_BEARER_TOKEN: # Base64 of Twitter/X Bearer token
  PROD_REDDIT_CLIENT_ID: # Base64 of Reddit client ID
  PROD_REDDIT_CLIENT_SECRET: # Base64 of Reddit client secret
  PROD_NEWSAPI_KEY: # Base64 of NewsAPI key
  PROD_ALPHA_VANTAGE_KEY: # Base64 of Alpha Vantage API key
  PROD_FMP_KEY: # Base64 of Financial Modeling Prep API key

  # NovaSignal Integration
  PROD_NOVASIGNAL_API_KEY: # Base64 of NovaSignal API key
  PROD_NOVASIGNAL_SECRET: # Base64 of NovaSignal secret
  PROD_NOVASIGNAL_WEBHOOK_SECRET: # Base64 of NovaSignal webhook secret

  # Monitoring and Alerting
  PROD_ALERT_WEBHOOK_URL: # Base64 of alert webhook URL
  PROD_ALERT_EMAILS: # Base64 of JSON array of alert email addresses
  PROD_ERROR_TRACKING_DSN: # Base64 of error tracking DSN (Sentry, etc.)
  PROD_LOG_ENDPOINT: # Base64 of log aggregation endpoint
  PROD_METRICS_ENDPOINT: # Base64 of metrics endpoint
  PROD_SIEM_ENABLED: # Base64 of "true" or "false"
  PROD_SIEM_ENDPOINT: # Base64 of SIEM endpoint URL
  PROD_SIEM_API_KEY: # Base64 of SIEM API key

  # Cloud Services Credentials
  PROD_AWS_REGION: # Base64 of AWS region (e.g., "us-east-1")
  PROD_BACKUP_BUCKET: # Base64 of S3 backup bucket name
  PROD_CDN_URL: # Base64 of CDN URL
  PROD_STATIC_URL: # Base64 of static assets URL

  # Secrets Management
  PROD_SECRETS_ENCRYPTION_KEY: # Base64 of secrets encryption key
  PROD_AZURE_VAULT_URL: # Base64 of Azure Key Vault URL
  PROD_VAULT_URL: # Base64 of HashiCorp Vault URL
  PROD_VAULT_TOKEN: # Base64 of HashiCorp Vault token

  # Service Discovery and Internal Communication
  PROD_DB_SERVICE: # Base64 of internal database service name
  PROD_REDIS_SERVICE: # Base64 of internal Redis service name
  PROD_METRICS_SERVICE: # Base64 of internal metrics service name

  # Deployment Information
  PROD_DEPLOYMENT_VERSION: # Base64 of deployment version
  PROD_BUILD_NUMBER: # Base64 of build number
  PROD_GIT_COMMIT: # Base64 of Git commit hash
  PROD_K8S_CLUSTER: # Base64 of Kubernetes cluster name

  # Feature Flags (Sensitive)
  PROD_ENABLE_AUTO_TRADING: # Base64 of "true" or "false"
  PROD_ENABLE_LIVE_TRADING: # Base64 of "true" or "false"

  # Emergency Contacts
  PROD_EMERGENCY_CONTACT: # Base64 of emergency contact information

  # Additional Secret Configuration
  CONFIG_ENCRYPTION_KEY: # Base64 of configuration encryption key
  WEBHOOK_SIGNATURE_SECRET: # Base64 of webhook signature verification secret
  SESSION_ENCRYPTION_KEY: # Base64 of session encryption key
  COOKIE_SIGNING_KEY: # Base64 of cookie signing key
  CSRF_SECRET_KEY: # Base64 of CSRF protection secret key

  # SSL/TLS Certificates and Keys
  TLS_CERT: # Base64 of TLS certificate for HTTPS
  TLS_KEY: # Base64 of TLS private key
  TLS_CA_BUNDLE: # Base64 of CA certificate bundle
  
  # Database Backup Encryption
  BACKUP_ENCRYPTION_KEY: # Base64 of backup encryption key
  BACKUP_SIGNING_KEY: # Base64 of backup integrity signing key

  # API Rate Limiting Secrets
  RATE_LIMIT_REDIS_KEY: # Base64 of Redis key for rate limiting
  
  # Audit and Compliance
  AUDIT_LOG_ENCRYPTION_KEY: # Base64 of audit log encryption key
  COMPLIANCE_REPORTING_KEY: # Base64 of compliance reporting API key

---
apiVersion: v1
kind: Secret
metadata:
  name: supernova-tls-production
  namespace: supernova-production
  labels:
    app: supernova-ai
    environment: production
    secret-type: tls
type: kubernetes.io/tls
data:
  # TLS certificate and key for ingress
  tls.crt: # Base64 encoded TLS certificate
  tls.key: # Base64 encoded TLS private key

---
apiVersion: v1
kind: Secret
metadata:
  name: supernova-registry-secret
  namespace: supernova-production
  labels:
    app: supernova-ai
    environment: production
    secret-type: docker-registry
type: kubernetes.io/dockerconfigjson
data:
  # Docker registry authentication for pulling private images
  .dockerconfigjson: # Base64 encoded Docker config JSON

---
# Service Account Token Secret (if using custom tokens)
apiVersion: v1
kind: Secret
metadata:
  name: supernova-sa-token
  namespace: supernova-production
  labels:
    app: supernova-ai
    environment: production
    secret-type: service-account-token
  annotations:
    kubernetes.io/service-account.name: supernova-prod-sa
type: kubernetes.io/service-account-token

---
# External Secrets Store Integration (for cloud secret managers)
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: supernova-external-secrets
  namespace: supernova-production
  labels:
    app: supernova-ai
    environment: production
spec:
  # Refresh interval for external secrets
  refreshInterval: 15m
  
  # Secret store reference (AWS Secrets Manager example)
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  
  # Target secret to create/update
  target:
    name: supernova-secrets-external
    creationPolicy: Owner
    template:
      type: Opaque
      metadata:
        labels:
          app: supernova-ai
          environment: production
          source: external-secrets
      data:
        DATABASE_URL: "{{ .database_url }}"
        OPENAI_API_KEY: "{{ .openai_api_key }}"
        ANTHROPIC_API_KEY: "{{ .anthropic_api_key }}"
        REDIS_URL: "{{ .redis_url }}"
        SECRET_KEY: "{{ .secret_key }}"
        JWT_SECRET_KEY: "{{ .jwt_secret_key }}"
        ENCRYPTION_KEY: "{{ .encryption_key }}"
  
  # Data to extract from external secret store
  data:
    - secretKey: database_url
      remoteRef:
        key: supernova/production/database
        property: url
    
    - secretKey: openai_api_key
      remoteRef:
        key: supernova/production/llm
        property: openai_key
    
    - secretKey: anthropic_api_key
      remoteRef:
        key: supernova/production/llm
        property: anthropic_key
    
    - secretKey: redis_url
      remoteRef:
        key: supernova/production/cache
        property: redis_url
    
    - secretKey: secret_key
      remoteRef:
        key: supernova/production/security
        property: secret_key
    
    - secretKey: jwt_secret_key
      remoteRef:
        key: supernova/production/security
        property: jwt_secret_key
    
    - secretKey: encryption_key
      remoteRef:
        key: supernova/production/security
        property: encryption_key

---
# Sealed Secret (alternative approach using Bitnami Sealed Secrets)
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: supernova-sealed-secrets
  namespace: supernova-production
  labels:
    app: supernova-ai
    environment: production
    secret-type: sealed
spec:
  template:
    metadata:
      name: supernova-sealed-secrets
      namespace: supernova-production
      labels:
        app: supernova-ai
        environment: production
    type: Opaque
  encryptedData:
    # These would be encrypted using kubeseal tool
    # Example: echo -n "secret-value" | kubeseal -o yaml --scope strict
    DATABASE_URL: AgBy3i4OJSWK+PiTySWZE...  # Sealed/encrypted value
    OPENAI_API_KEY: AgAKAoiQm+FZ7qd8fQ3l...  # Sealed/encrypted value
    # ... more sealed secrets

---
# RBAC for secret access
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: supernova-production
  name: supernova-secrets-reader
  labels:
    app: supernova-ai
    environment: production
rules:
- apiGroups: [""]
  resources: ["secrets"]
  resourceNames: 
    - "supernova-secrets-production"
    - "supernova-tls-production"
    - "supernova-secrets-external"
  verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: supernova-secrets-binding
  namespace: supernova-production
  labels:
    app: supernova-ai
    environment: production
subjects:
- kind: ServiceAccount
  name: supernova-prod-sa
  namespace: supernova-production
roleRef:
  kind: Role
  name: supernova-secrets-reader
  apiGroup: rbac.authorization.k8s.io